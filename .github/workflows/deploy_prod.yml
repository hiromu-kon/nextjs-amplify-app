name: Deploy production
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_NAME_APP: terrafom-sample-dev-next-app
  ECS_CONTAINER_NAME_APP: nextjs-esc-sample
  ECS_SERVICE: terraform-sample-dev
  ECS_CLUSTER: terrafom-sample-dev-cluster
  # MIGRATE_ECS_TASK_DEFINITION: .github/workflows/migrate-task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME_APP }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Download migrate task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.MIGRATE_ECS_TASK_DEFINITION }} --query taskDefinition > migrate-task-definition.json

      - name: New image ID ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME_APP }}
          image: ${{ steps.build-image.outputs.image }}

      - name: New image ID ECS migrate task definition
        id: migrate-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: migrate-task-definition.json
          container-name: sample-dev-migration
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Run ECS task command
      #   id: run-task
      #   uses: yyoshiki41/ecs-run-task-action@v0.0.8
      #   with:
      #     task-definition: ${{ env.MIGRATE_ECS_TASK_DEFINITION }}
      #     task-definition-family: run-command
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     subnets: ${{ secrets.SUBNET_IDS }}
      #     security-groups: ${{ secrets.SECURITY_GROUP_IDS }}
      #     container-name: migration
      #     command: '["echo", "Container is running!"]'

      - name: Get latest task definition revision
        id: latest_revision
        run: |
          REVISION=$(aws ecs describe-task-definition --task-definition my-task-family --query 'taskDefinition.revision' --output text)
          echo "::set-output name=revision::$REVISION"

      - name: ECS run migrate task
        env:
          task_definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          vpc_configuration: '{subnets=${{ secrets.SUBNET_IDS }},securityGroups=${{ secrets.SECURITY_GROUP_IDS }},assignPublicIp=DISABLED}'
          container_overrides: '{"containerOverrides": [{"name": "web", "command": ["echo", "Container is running!"] }]}'
        run: |
          task_arn=$(aws ecs run-task \
            --region ap-northeast-1 \
            --launch-type FARGATE \
            --cluster '${{ env.cluster }}' \
            --network-configuration 'awsvpcConfiguration=${{ env.vpc_configuration }}' \
            --task-definition 'sample-dev-migration' \
            --overrides '${{ env.container_overrides }}' \
            --query tasks[0].taskArn --output text)

      # - name: Run Migrations
      #   uses: noelzubin/aws-ecs-run-task@v1.0
      #   with:
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     task-definition: ${{ steps.migrate-task-def.outputs.task-definition }}
      #     subnets: ${{ secrets.SUBNET_IDS }}
      #     security-groups: ${{ secrets.SECURITY_GROUP_IDS }}
      #     assign-public-ip: ENABLED
      #     override-container: migration
      #     override-container-command: |
      #       echo
      #       Container is running!